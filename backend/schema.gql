# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddOAuthPlatformConnectionInput {
  oauthToken: String!
  oauthTokenSecret: String!
  oauthVerifier: String!
  platform: Platform!
}

input AddPlatformConnectionInput {
  entityId: ID!
  entityName: String!
  accessToken: String!
  platform: Platform!
  platformUserId: String!
}

type AggregatedStatus {
  timestamp: Date!
  positiveReactionsCount: Int!
  negativeReactionsCount: Int!
  commentsCount: Int!
  sharesCount: Int!
}

"""Date custom scalar type"""
scalar Date

type File {
  id: ID!
  userId: ID!
}

type Mutation {
  sendFeedback(email: String, feedback: SendFeebackInput!): Boolean!
  addPlatformConnection(platformConnection: AddPlatformConnectionInput!): PlatformConnection!
  addOAuthPlatformConnection(platformConnection: AddOAuthPlatformConnectionInput!): PlatformConnection!
  removePlatformConnection(id: ID!): ID!
  createPost(post: PostInput!): Post!
}

type OAuthTokenResult {
  oauthToken: String!
  oauthTokenSecret: String!
}

enum Platform {
  FACEBOOK
  TWITTER
}

type PlatformConnection {
  id: ID!
  userId: ID!
  platform: Platform!
  accessToken: String!
  accessTokenSecret: String
  entityId: String!
  entityName: String!
}

type Post {
  id: ID!
  text: String!
  userId: ID!
  createdAt: Date
  updatedAt: Date!
  media: [PostMedia!]!
  platforms: [PostPlatform!]!
  status: [AggregatedStatus!]!
  latestStatus: AggregatedStatus
}

type PostComment {
  id: ID!
  postId: ID!
  postPlatformId: ID!
  timestamp: Date!
  message: String!
  replyingToId: ID
  postPlatform: PostPlatform!
  post: Post!
  replyingTo: PostComment
}

input PostInput {
  text: String!
  images: [ID!]!
  platformConnections: [ID!]!
}

type PostMedia {
  postId: ID!
  fileId: ID!
  image: File!
  post: Post!
}

type PostPlatform {
  id: ID!
  postId: ID!
  platformConnectionId: ID!
  platform: Platform!
  platformEntityId: String
  platformEntityUrl: String
  platformConnection: PlatformConnection
  post: Post!
}

type Query {
  platformConnections: [PlatformConnection!]!
  getPlatformOAuthRequestToken(callbackUrl: String!, platform: Platform!): OAuthTokenResult!
  post(id: ID!): Post!
  posts: [Post!]!
}

input SendFeebackInput {
  message: String!
}
